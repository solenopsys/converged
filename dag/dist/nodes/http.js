import{JSONPath as W}from"jsonpath-plus";function K(A,C,z){let E=A;for(let[f,F]of Object.entries(z)){let L=new RegExp(`\\{${f}\\}`,"g");E=E.replace(L,F)}return E}class Q{name;config;body;constructor(A,C,z){this.name=A,this.config={method:"GET",timeout:5000,followRedirects:!0,...C},this.body=z}async execute(A,C){try{let z=K(this.config.url,A,C),E={};if(this.config.headers)for(let[w,G]of Object.entries(this.config.headers))E[w]=K(G,A,C);let f=void 0;if(this.body!==void 0)if(typeof this.body==="string")f=K(this.body,A,C);else if(typeof this.body==="object"){f=JSON.stringify(this.body),f=K(f,A,C);try{f=JSON.parse(f)}catch{}}else f=this.body;let F={method:this.config.method,headers:{"Content-Type":"application/json",...E}};if(["POST","PUT","PATCH"].includes(this.config.method)&&f!==void 0)if(typeof f==="object")F.body=JSON.stringify(f);else F.body=f;let L=new AbortController,M=setTimeout(()=>L.abort(),this.config.timeout);F.signal=L.signal;try{let w=await fetch(z,F);clearTimeout(M);let G={status:w.status,statusText:w.statusText,headers:Object.fromEntries(w.headers.entries()),data:null};if(w.headers.get("content-type")?.includes("application/json"))G.data=await w.json();else G.data=await w.text();if(!w.ok)throw new Error(`HTTP Error: ${w.status} ${w.statusText}`);return G}catch(w){throw clearTimeout(M),w}}catch(z){throw new Error(`HttpNode "${this.name}" execution failed: ${z instanceof Error?z.message:String(z)}`)}}}export{Q as HttpNode};
