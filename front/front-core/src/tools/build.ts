// build.ts ‚Äî —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –≤–µ—Ä—Å–∏–π –∏–∑ package.json
import { $ } from "bun";
import { readdirSync, statSync, mkdirSync, writeFileSync } from "fs";
import { join } from "path";

const size = (p: string) => {
  try {
    return `${(statSync(p).size / 1024).toFixed(1)}kb`;
  } catch {
    return "0kb";
  }
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º package.json –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π
let packageVersions: Record<string, string> = {};
try {
  const packageJson = await Bun.file("package.json").json();
  packageVersions = {
    ...packageJson.dependencies,
    ...packageJson.devDependencies,
  };
  console.log(`üì¶ Loaded ${Object.keys(packageVersions).length} package versions from package.json`);
} catch (error) {
  console.warn("‚ö†Ô∏è  Could not load package.json, using fallback versions");
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –ø–∞–∫–µ—Ç–∞ –∏–∑ package.json –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback
 */
function getPackageVersion(packageName: string, fallback: string = "latest"): string {
  const version = packageVersions[packageName];
  if (version) return version;
  
  const basePackage = packageName.split('/')[0];
  const version2 = packageVersions[basePackage];
  if (version2) return version2;

  throw new Error(`Package ${packageName} not found in package.json`);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è bundle –≥—Ä—É–ø–ø —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π standalone —Ä–µ–∂–∏–º–∞
const bundleGroups = [
  {
    name: "radix-ui",
    mode: "bundle",
    packages: [
      "@radix-ui/react-avatar",
      "@radix-ui/react-checkbox", 
      "@radix-ui/react-collapsible",
      "@radix-ui/react-dialog",
      "@radix-ui/react-dropdown-menu",
      "@radix-ui/react-label",
      "@radix-ui/react-select",
      "@radix-ui/react-separator",
      "@radix-ui/react-slot",
      "@radix-ui/react-tabs",
      "@radix-ui/react-toggle",
      "@radix-ui/react-toggle-group", 
      "@radix-ui/react-tooltip",
    ],
    deps: ["react", "react-dom"]
  },
  
  {
    name: "dnd-kit",
    mode: "bundle",
    packages: [
      "@dnd-kit/core",
      "@dnd-kit/modifiers",
      "@dnd-kit/sortable",
      "@dnd-kit/utilities",
    ],
    deps: ["react", "react-dom"]
  },
  
  {
    name: "utils",
    mode: "standalone", 
    packages: [
      "tailwind-merge",
      "i18next",
    ],
    deps: []
  },
 
  {
    name: "effector",
    mode: "bundle",
    packages: [ 
      "effector-react",
    ],
    deps: ["react", "react-dom", "effector"]
  },
];

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤ (–≤–µ—Ä—Å–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ package.json)
const packageList = [
  // Core React packages
  "react",
  "react-dom",
  "react-dom/client",
  "react/jsx-runtime",
  "react/jsx-dev-runtime",
  
  // Routing
  "react-router-dom",
  "react-router-dom/client",
  
  // UI Libraries
  "@tanstack/react-table",
  "recharts",
  "sonner",
  "tailwind-merge",
  
  // Internationalization
  "i18next",
  "react-i18next",
  
  // Radix UI Components
  "@radix-ui/react-avatar",
  "@radix-ui/react-checkbox",
  "@radix-ui/react-collapsible",
  "@radix-ui/react-dialog",
  "@radix-ui/react-dropdown-menu",
  "@radix-ui/react-label",
  "@radix-ui/react-select",
  "@radix-ui/react-separator",
  "@radix-ui/react-slot",
  "@radix-ui/react-tabs",
  "@radix-ui/react-toggle",
  "@radix-ui/react-toggle-group",
  "@radix-ui/react-tooltip",
  
  // DnD Kit
  "@dnd-kit/core",
  "@dnd-kit/modifiers",
  "@dnd-kit/sortable",
  "@dnd-kit/utilities",

  "zod",
  "vaul",   
  "dagre",
  "i18next-http-backend",

  // effector
  "effector",
  "effector-react",
];

// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø—É (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
const packageGroups = {
  core: ["react", "react-dom", "react-dom/client", "react/jsx-runtime", "react/jsx-dev-runtime"],
  routing: ["react-router-dom", "react-router-dom/client"],
  ui: ["@tanstack/react-table", "recharts", "sonner", "tailwind-merge"],
  i18n: ["i18next", "react-i18next"],
  radix: packageList.filter(pkg => pkg.startsWith("@radix-ui/")),
  dndKit: packageList.filter(pkg => pkg.startsWith("@dnd-kit/")),
  effector: ["effector", "effector-react"],
};

// –ü–∞–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –≤ bundle (runtime –ø–∞–∫–µ—Ç—ã)
const noBundlePackages = [
  "react",
  "react-dom", 
  "react-dom/client",
  "react/jsx-runtime",
  "react/jsx-dev-runtime",
  "react-router-dom",
  "react-router-dom/client",
  "effector", // —Ç–æ–ª—å–∫–æ effector, –±–µ–∑ effector-react
];

// –ü–∞–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bundle –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const bundlePackages = [
  "@radix-ui/react-avatar",
  "@radix-ui/react-checkbox", 
  "@radix-ui/react-collapsible",
  "@radix-ui/react-dialog",
  "@radix-ui/react-dropdown-menu",
  "@radix-ui/react-label",
  "@radix-ui/react-select",
  "@radix-ui/react-separator",
  "@radix-ui/react-slot",
  "@radix-ui/react-tabs",
  "@radix-ui/react-toggle",
  "@radix-ui/react-toggle-group", 
  "@radix-ui/react-tooltip",
  "@dnd-kit/core",
  "@dnd-kit/modifiers",
  "@dnd-kit/sortable",
  "@dnd-kit/utilities",
  "@tanstack/react-table",
  "recharts",
  "sonner",
  "vaul",
  "tailwind-merge",
  "react-i18next",
  "i18next",
  "effector-react", // –¥–æ–±–∞–≤–ª–µ–Ω
];

/**
 * –ù–∞—Ö–æ–¥–∏—Ç bundle –≥—Ä—É–ø–ø—É –¥–ª—è –ø–∞–∫–µ—Ç–∞
 */
function findBundleGroup(packageName: string) {
  return bundleGroups.find(group => group.packages.includes(packageName)) || null;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è bundle –≥—Ä—É–ø–ø—ã (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
 */
function createBundleGroupUrl(groupName: string, config: { mode: string; packages: string[]; deps?: string[] }): string {
  return `Mode: ${config.mode}, Packages: ${config.packages.length}`;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç preload links –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
 */
function generatePreloadLinks(): string[] {
  const criticalPackages = [
    "react",
    "react-dom", 
    "react-dom/client",
    "react/jsx-runtime",
    "react/jsx-dev-runtime"
  ];
  
  return criticalPackages.map(pkg => {
    const version = getPackageVersion(pkg);
    if (!version) return '';
    
    const url = generatePackageUrl(pkg, version);
    return `<link rel="modulepreload" href="${url}">`;
  }).filter(Boolean);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –ø–∞–∫–µ—Ç React –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
 */
function requiresReactDeps(packageName: string): boolean {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º bundleGroup.deps
  const bundleGroup = findBundleGroup(packageName);
  if (bundleGroup && bundleGroup.deps.includes("react")) {
    return true;
  }
  
  // –ò—Å–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ React –ø–∞–∫–µ—Ç—ã
  if (packageName === "react" || 
      packageName.startsWith("react/") || 
      packageName === "react-dom" ||
      packageName.startsWith("react-dom/")) {
    return false;
  }
  
  // –í—Å–µ —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç react –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ React-–∑–∞–≤–∏—Å–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
  return packageName.includes("react") || 
         packageName.includes("@tanstack") || 
         packageName.includes("recharts") ||
         packageName.includes("@radix-ui/") ||
         packageName.includes("@dnd-kit/") ||
         packageName === "vaul" ||
         packageName === "sonner";
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –≤ bundle
 */
function shouldBundle(packageName: string): boolean {
  if (noBundlePackages.includes(packageName)) return false;
  if (bundlePackages.includes(packageName)) return true;
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: runtime –ø–∞–∫–µ—Ç—ã –Ω–µ bundle, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - bundle
  return !packageName.includes("react") || packageName.includes("react-");
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –ø–∞–∫–µ—Ç–∞ –∏ subpath
 */
function parsePackageName(fullName: string): { packageName: string; subpath?: string } {
  if (fullName.includes('/') && !fullName.startsWith('@')) {
    // –°–ª—É—á–∞–π react-dom/client
    const [packageName, ...subpathParts] = fullName.split('/');
    return { 
      packageName,
      subpath: subpathParts.join('/') 
    };
  } else if (fullName.startsWith('@') && fullName.split('/').length > 2) {
    // –°–ª—É—á–∞–π @scope/package/subpath
    const parts = fullName.split('/');
    const packageName = `${parts[0]}/${parts[1]}`;
    const subpath = parts.slice(2).join('/');
    return { packageName, subpath };
  }
  
  return { packageName: fullName };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç deps —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–∞–∫–µ—Ç–∞
 */
function generateDepsString(packageName: string): string {
  const bundleGroup = findBundleGroup(packageName);
  
  if (bundleGroup && bundleGroup.deps.length > 0) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º deps –∏–∑ bundleGroup
    return bundleGroup.deps.map(dep => {
      const depVersion = getPackageVersion(dep).replace("^", "").replace("~", "");
      return `${dep}@${depVersion}`;
    }).join(",");
  }
  
  // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ React deps
  if (requiresReactDeps(packageName)) {
    const reactVersion = getPackageVersion("react").replace("^", "").replace("~", "");
    const reactDomVersion = getPackageVersion("react-dom").replace("^", "").replace("~", "");
    return `react@${reactVersion},react-dom@${reactDomVersion}`;
  }
  
  return "";
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –ø–∞–∫–µ—Ç–∞ –Ω–∞ ESM.sh —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
 */
function generatePackageUrl(name: string, version: string): string {
  const { packageName, subpath } = parsePackageName(name);

  const strongVersion = version.replace("^", "").replace("~", "");
  
  // –°—Ç—Ä–æ–∏–º –±–∞–∑–æ–≤—ã–π URL
  let baseUrl = `https://esm.sh/${packageName}@${strongVersion}`;
  if (subpath) {
    baseUrl += `/${subpath}`;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ –ø–∞–∫–µ—Ç –≤ bundle –≥—Ä—É–ø–ø—É —Å–æ standalone —Ä–µ–∂–∏–º–æ–º
  const bundleGroup = findBundleGroup(name);
  const useStandalone = bundleGroup?.mode === "standalone";
  
  if (useStandalone) {
    // Standalone –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
    baseUrl += "?standalone";
  } else if (shouldBundle(name)) {
    // –û–±—ã—á–Ω—ã–π bundle —Ä–µ–∂–∏–º
    baseUrl += "?bundle";
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const depsString = generateDepsString(name);
    if (depsString) {
      baseUrl += `&deps=${depsString}`;
    }
  } else {
    // No bundle —Ä–µ–∂–∏–º –¥–ª—è runtime –ø–∞–∫–µ—Ç–æ–≤
    const depsString = generateDepsString(name);
    if (depsString) {
      baseUrl += `?deps=${depsString}`;
    }
  }
  
  return baseUrl;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–∫–µ—Ç —á–∞—Å—Ç—å—é bundle –≥—Ä—É–ø–ø—ã
 */
function isPartOfBundleGroup(packageName: string): boolean {
  return findBundleGroup(packageName) !== null;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Import Map –¥–ª—è ESM.sh
 */
function generateImportMap() {
  const imports: Record<string, string> = {};
  
  for (const packageName of packageList) {
    const version = getPackageVersion(packageName);
    imports[packageName] = generatePackageUrl(packageName, version);
  }
  
  return { imports };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è bundler
 */
function getExternalPackages(): string[] {
  return [...packageList];
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–∫–µ—Ç–æ–≤
 */
function logPackageStats() {
  console.log("\nüìä Package Statistics:");
  Object.entries(packageGroups).forEach(([group, pkgs]) => {
    console.log(`   ${group}: ${pkgs.length} packages`);
  });
  
  const standaloneCount = bundleGroups
    .filter(config => config.mode === "standalone")
    .reduce((sum, config) => sum + config.packages.length, 0);
    
  const bundledCount = packageList
    .filter(pkg => shouldBundle(pkg) && !isPartOfBundleGroup(pkg)).length;
    
  const noBundleCount = packageList
    .filter(pkg => !shouldBundle(pkg)).length;
  
  console.log(`   Standalone: ${standaloneCount} packages (self-contained)`);
  console.log(`   Bundled: ${bundledCount} packages`);
  console.log(`   No bundle: ${noBundleCount} packages`);
  console.log(`   Total: ${packageList.length} packages\n`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
  if (bundleGroups.length > 0) {
    console.log("‚ö° Optimization Groups:");
    for (const group of bundleGroups) {
      const modeIcon = group.mode === "standalone" ? "üì¶" : "üéÅ";
      console.log(`   ${modeIcon} ${group.name}: ${group.packages.length} packages (${group.mode})`);
    }
    console.log();
  }
}

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é dist
mkdirSync("dist", { recursive: true });

// –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
logPackageStats();

/*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 0. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Import Map ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*/
const importMap = generateImportMap();
writeFileSync("dist/import-map.json", JSON.stringify(importMap, null, 2));
console.log(`üìã import-map.json - ${Object.keys(importMap.imports).length} packages`);

await Bun.build({
  entrypoints: ["./src/index.ts"],
  outdir: "./dist",
  format: "esm",
  minify: true,
  sourcemap: "linked",
  target: "browser",
  importmap: "../import-map.json",
  external: getExternalPackages(),
  jsx: "automatic",
  tsconfig: "./tsconfig.json"
});
console.log(`üì¶ index.js - ${size("dist/index.js")}`);

await $`bunx @tailwindcss/cli -i src/index.css -o ./dist/index.css`;