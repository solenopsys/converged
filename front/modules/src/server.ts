import { Elysia } from 'elysia'
import { cors } from '@elysiajs/cors'
import { readdirSync } from 'fs'

const port = 3005;

const app = new Elysia()
  // –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
  .use(cors({
    origin: true, // –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ origins, –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true
  }))
  
  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  .get('/', () => {
    const listDirs = readdirSync('./packages')
    return listDirs
  })
  
  .get('/modules/:name', async ({ params }) => {
    const { name } = params
    const baseName = name.split('.')[0]
    const path = `./packages/${baseName}/dist/${name}`

    const fileExists = await Bun.file(path).exists()

    if (fileExists) {
      return Bun.file(path)
    }

    await Bun.spawn(['bun', 'bld'], {
      cwd: `./packages/${baseName}`
    }).exited

    return Bun.file(path)
  })

  .get('/modules/locale/:name/:locale', async ({ params }) => {
    const { name } = params
    const baseName = name.split('.')[0]
    const path = `./packages/${baseName}/locales/${params.locale}`

    const fileExists = await Bun.file(path).exists()

    if (fileExists) {
      return Bun.file(path)
    }

    await Bun.spawn(['bun', 'bld'], {
      cwd: `./packages/${baseName}`
    }).exited

    return Bun.file(path)
  })
  
  // SSE endpoint –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  .get('/events', ({ set }) => {
    set.headers = {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive',
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Headers': 'Cache-Control'
    }

    return new ReadableStream({
      start(controller) {
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        controller.enqueue('data: Connected to server\n\n')
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        const interval = setInterval(() => {
          const time = new Date().toLocaleTimeString()
          controller.enqueue(`data: Current time: ${time}\n\n`)
        }, 2000)
        
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        return () => clearInterval(interval)
      }
    })
  })
  
  // API –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–±—ã—Ç–∏—è
  .post('/trigger', ({ body }) => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    // (–¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤)
    return { message: 'Event triggered', data: body }
  })
  
  .listen(port)

console.log('ü¶ä Elysia server running at http://localhost:' + port)
console.log('üì° SSE endpoint: http://localhost:' + port + '/events')