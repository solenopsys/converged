import { Elysia } from 'elysia'
import { readFileSync, existsSync } from 'fs'
import { join } from 'path'

const getMimeType = (filename) => {
  if (filename.endsWith('.js')) return 'application/javascript'
  if (filename.endsWith('.js.map')) return 'application/javascript'
  if (filename.endsWith('.css')) return 'text/css'
  if (filename.endsWith('.html')) return 'text/html'
  if (filename.endsWith('.webm')) return 'video/webm'
  if (filename.endsWith('.jpg') || filename.endsWith('.jpeg')) return 'image/jpeg'
  if (filename.endsWith('.svg')) return 'image/svg+xml'
  if (filename.endsWith('.ico')) return 'image/x-icon'
  return 'text/plain'
}

const app = new Elysia()
  // –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ POST –∑–∞–ø—Ä–æ—Å–æ–≤ /services/ –Ω–∞ localhost:3001 (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å /services/)
  .post('/services/*', async ({ request, path }) => {
    try {
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å /services/ –∏–∑ –ø—É—Ç–∏
      const servicePath = path.replace('/services/', '/')
      const targetUrl = `http://localhost:3001${servicePath}`
      
      console.log(`Proxying POST: ${path} -> ${targetUrl}`)
      
      // –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const headers = new Headers()
      for (const [key, value] of request.headers.entries()) {
        // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å
        if (!['host', 'connection', 'content-length'].includes(key.toLowerCase())) {
          headers.set(key, value)
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
      const proxyRequest = new Request(targetUrl, {
        method: 'POST',
        headers,
        body: request.body,
      })
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
      const response = await fetch(proxyRequest)
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      const proxyResponse = new Response(response.body, {
        status: response.status,
        statusText: response.statusText,
        headers: response.headers
      })
      
      return proxyResponse
      
    } catch (error) {
      console.error('Proxy error:', error)
      return new Response('Proxy Error', { 
        status: 502,
        headers: { 'Content-Type': 'text/plain' }
      })
    }
  })
  // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ SPA
  .get('*', ({ path }) => {
    // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ —Å–ª–µ—à–∏
    const cleanPath = path.replace(/^\/+/, '') || 'index.html'
    const filePath = join('dist', cleanPath)
    
    console.log(`Request: ${path} -> File: ${filePath}`)
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª (–∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ) - –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –æ—Ç–¥–∞—Ç—å
    if (cleanPath.includes('.')) {
      if (existsSync(filePath)) {
        const content = readFileSync(filePath)
        return new Response(content, {
          headers: { 'Content-Type': getMimeType(filePath) }
        })
      }
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - 404
      return new Response('Not Found', { status: 404 })
    }
    
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π (—Ä–æ—É—Ç—ã SPA) - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º index.html
    const indexPath = join('dist', 'index.html')
    if (existsSync(indexPath)) {
      const content = readFileSync(indexPath)
      return new Response(content, {
        headers: { 'Content-Type': 'text/html' }
      })
    }

    // libs 
    const libsPath = join('dist', 'libs', cleanPath)
    if (existsSync(libsPath)) {
      const content = readFileSync(libsPath)
      return new Response(content, {
        headers: { 'Content-Type': getMimeType(libsPath) }
      })
    }
    
    return new Response('index.html not found', { status: 404 })
  })
  .listen(3000)

console.log('üöÄ Server running on http://localhost:3000')
console.log('üîÑ Proxying POST /services/* to http://localhost:3001 (removing /services/ prefix)')