import { Elysia } from 'elysia'
import { readFileSync, existsSync } from 'fs'
import { join } from 'path'

const getMimeType = (filename) => {
  if (filename.endsWith('.js')) return 'application/javascript'
  if (filename.endsWith('.js.map')) return 'application/javascript'
  if (filename.endsWith('.css')) return 'text/css'
  if (filename.endsWith('.html')) return 'text/html'
  if (filename.endsWith('.html')) return 'text/html'
  if (filename.endsWith('.webm')) return 'video/webm'
  if (filename.endsWith('.jpg') || filename.endsWith('.jpeg')) return 'image/jpeg'
  if (filename.endsWith('.svg')) return 'image/svg+xml'
  if (filename.endsWith('.ico')) return 'image/x-icon'
  return 'text/plain'
}

const app = new Elysia()
  .get('*', ({ path }) => {
    // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ —Å–ª–µ—à–∏
    const cleanPath = path.replace(/^\/+/, '') || 'index.html'
    const filePath = join('dist', cleanPath)
    
    console.log(`Request: ${path} -> File: ${filePath}`)
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª (–∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ) - –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –æ—Ç–¥–∞—Ç—å
    if (cleanPath.includes('.')) {
      if (existsSync(filePath)) {
        const content = readFileSync(filePath)
        return new Response(content, {
          headers: { 'Content-Type': getMimeType(filePath) }
        })
      }
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - 404
      return new Response('Not Found', { status: 404 })
    }
    
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π (—Ä–æ—É—Ç—ã SPA) - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º index.html
    const indexPath = join('dist', 'index.html')
    if (existsSync(indexPath)) {
      const content = readFileSync(indexPath)
      return new Response(content, {
        headers: { 'Content-Type': 'text/html' }
      })
    }
    
    return new Response('index.html not found', { status: 404 })
  })
  .listen(3000)

console.log('üöÄ Server running on http://localhost:3000')