// diagnose-native.ts
import { readFileSync, existsSync } from 'fs';

function readVarInt(buffer: Buffer, offset: number): [number, number] {
  let value = 0;
  let shift = 0;
  let currentOffset = offset;
  
  while (currentOffset < buffer.length) {
    const byte = buffer[currentOffset++];
    value |= (byte & 0x7F) << shift;
    
    if ((byte & 0x80) === 0) {
      break;
    }
    shift += 7;
    
    if (shift > 63) {
      throw new Error('VarInt —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π');
    }
  }
  
  return [value, currentOffset];
}

function analyzeNativeFile(filePath: string) {
  console.log(`\n${'='.repeat(70)}`);
  console.log(`–ê–ù–ê–õ–ò–ó: ${filePath}`);
  console.log('='.repeat(70));
  
  if (!existsSync(filePath)) {
    console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}\n`);
    return;
  }
  
  const buffer = readFileSync(filePath);
  console.log(`üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${buffer.length} –±–∞–π—Ç\n`);
  
  // –ü–µ—Ä–≤—ã–µ 64 –±–∞–π—Ç–∞ –≤ hex
  const previewSize = Math.min(64, buffer.length);
  const hexLines: string[] = [];
  for (let i = 0; i < previewSize; i += 16) {
    const chunk = buffer.slice(i, Math.min(i + 16, previewSize));
    const hex = Array.from(chunk)
      .map(b => b.toString(16).padStart(2, '0'))
      .join(' ');
    const ascii = Array.from(chunk)
      .map(b => (b >= 32 && b < 127) ? String.fromCharCode(b) : '.')
      .join('');
    hexLines.push(`${i.toString(16).padStart(4, '0')}: ${hex.padEnd(48, ' ')} | ${ascii}`);
  }
  
  console.log('üîç Hex dump (–ø–µ—Ä–≤—ã–µ 64 –±–∞–π—Ç–∞):');
  hexLines.forEach(line => console.log(`   ${line}`));
  console.log();
  
  try {
    let offset = 0;
    
    // –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const [numColumns, offset1] = readVarInt(buffer, offset);
    const [numRows, offset2] = readVarInt(buffer, offset1);
    
    console.log('üìä –ó–ê–ì–û–õ–û–í–û–ö:');
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: ${numColumns}`);
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${numRows}`);
    console.log(`   –ë–∞–π—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${offset2}\n`);
    
    offset = offset2;
    
    // –ß–∏—Ç–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–æ–∫
    console.log('üìã –ö–û–õ–û–ù–ö–ò:');
    const columns: Array<{ name: string; type: string }> = [];
    
    for (let i = 0; i < numColumns; i++) {
      // –î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏
      const [nameLen, nameOffset] = readVarInt(buffer, offset);
      offset = nameOffset;
      
      // –ò–º—è –∫–æ–ª–æ–Ω–∫–∏
      if (offset + nameLen > buffer.length) {
        console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–µ–Ω–∏ –∫–æ–ª–æ–Ω–∫–∏ ${i + 1}`);
        return;
      }
      const name = buffer.slice(offset, offset + nameLen).toString('utf8');
      offset += nameLen;
      
      // –î–ª–∏–Ω–∞ —Ç–∏–ø–∞
      const [typeLen, typeOffset] = readVarInt(buffer, offset);
      offset = typeOffset;
      
      // –¢–∏–ø –∫–æ–ª–æ–Ω–∫–∏
      if (offset + typeLen > buffer.length) {
        console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–ø–∞ –∫–æ–ª–æ–Ω–∫–∏ ${i + 1}`);
        return;
      }
      const type = buffer.slice(offset, offset + typeLen).toString('utf8');
      offset += typeLen;
      
      columns.push({ name, type });
      console.log(`   ${i + 1}. "${name}" (${type})`);
    }
    
    console.log(`\nüìç –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –±–∞–π—Ç–∞: ${offset}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: ${buffer.length - offset} –±–∞–π—Ç\n`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log('üíª SQL –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –ß–¢–ï–ù–ò–Ø:');
    const sqlStruct = columns.map(c => `${c.name} ${c.type}`).join(', ');
    console.log(`   "${sqlStruct}"\n`);
    
    // –ü—Ä–∏–º–µ—Ä SQL –∑–∞–ø—Ä–æ—Å–∞
    console.log('üìù –ü–†–ò–ú–ï–† –ó–ê–ü–†–û–°–ê:');
    console.log(`   SELECT * FROM file('${filePath}', 'Native', '${sqlStruct}')\n`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
    console.log('üîé –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –î–ê–ù–ù–´–• (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞):');
    for (let colIdx = 0; colIdx < columns.length; colIdx++) {
      const col = columns[colIdx];
      const type = col.type.toLowerCase();
      
      let value: any = '<–Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ>';
      
      try {
        if (type === 'int8') {
          value = buffer.readInt8(offset);
          offset += 1;
        } else if (type === 'uint8') {
          value = buffer.readUInt8(offset);
          offset += 1;
        } else if (type === 'int16') {
          value = buffer.readInt16LE(offset);
          offset += 2;
        } else if (type === 'uint16') {
          value = buffer.readUInt16LE(offset);
          offset += 2;
        } else if (type === 'int32') {
          value = buffer.readInt32LE(offset);
          offset += 4;
        } else if (type === 'uint32' || type === 'datetime') {
          value = buffer.readUInt32LE(offset);
          if (type === 'datetime') {
            value = `${value} (${new Date(value * 1000).toISOString()})`;
          }
          offset += 4;
        } else if (type === 'int64' || type.startsWith('datetime64')) {
          value = buffer.readBigInt64LE(offset);
          if (type.startsWith('datetime64')) {
            value = `${value} (${new Date(Number(value)).toISOString()})`;
          }
          offset += 8;
        } else if (type === 'uint64') {
          value = buffer.readBigUInt64LE(offset);
          offset += 8;
        } else if (type === 'float32') {
          value = buffer.readFloatLE(offset).toFixed(2);
          offset += 4;
        } else if (type === 'float64') {
          value = buffer.readDoubleLE(offset).toFixed(2);
          offset += 8;
        } else if (type === 'uuid') {
          const uuidBytes = buffer.slice(offset, offset + 16);
          value = uuidBytes.toString('hex')
            .replace(/(.{8})(.{4})(.{4})(.{4})(.{12})/, '$1-$2-$3-$4-$5');
          offset += 16;
        } else if (type === 'string') {
          const [strLen, strOffset] = readVarInt(buffer, offset);
          offset = strOffset;
          if (offset + strLen <= buffer.length) {
            value = `"${buffer.slice(offset, offset + strLen).toString('utf8')}"`;
            offset += strLen;
          } else {
            value = '<–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö>';
          }
        } else {
          value = '<–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø>';
        }
      } catch (e) {
        value = `<–æ—à–∏–±–∫–∞: ${e}>`;
      }
      
      console.log(`   ${col.name}: ${value}`);
    }
    
    console.log('\n‚úÖ –§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω ClickHouse');
    
  } catch (error) {
    console.log(`‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê: ${error}\n`);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('ClickHouse Native Format Diagnostic Tool');
  console.log('='.repeat(70));
  
  const files = ['./logs.native', './metrics.native'];
  
  files.forEach(file => {
    analyzeNativeFile(file);
  });
  
  console.log(`\n${'='.repeat(70)}`);
  console.log('‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('='.repeat(70));
}

main();