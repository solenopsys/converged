// query-logs.ts
import { query } from "@lithdew/chdb-bun";

async function queryLogsFile(filename: string = './logs.native') {
  console.log(`üîç –ß–∏—Ç–∞–µ–º ${filename}...\n`);

  try {
    console.log('=== –í–°–ï –õ–û–ì–ò ===');
    const allLogs = await query(`SELECT * FROM file('${filename}', 'Native') ORDER BY timestamp`);
    console.log(allLogs);
    console.log();

    console.log('=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    const count = await query(`SELECT COUNT(*) as total FROM file('${filename}', 'Native')`);
    console.log(count);

    console.log('\n=== –ü–û –£–†–û–í–ù–Ø–ú ===');
    const byLevel = await query(`
      SELECT level, COUNT(*) as cnt, AVG(response_time_ms) as avg_time
      FROM file('${filename}', 'Native')
      GROUP BY level
      ORDER BY cnt DESC
    `);
    console.log(byLevel);

    console.log(`\n‚úÖ ${filename} –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

async function queryMetricsFile(filename: string = './metrics_compressed.native') {
  console.log('\n' + '='.repeat(70));
  console.log(`üîç –ß–∏—Ç–∞–µ–º ${filename}...\n`);

  try {
    console.log('=== –í–°–ï –ú–ï–¢–†–ò–ö–ò ===');
    const all = await query(`
      SELECT 
        formatDateTime(timestamp, '%Y-%m-%d %H:%M:%S') as time,
        metric_name, round(value, 2) as val, host, datacenter
      FROM file('${filename}', 'Native')
      ORDER BY timestamp, metric_name
    `);
    console.log(all);

    console.log('\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    const stats = await query(`
      SELECT 
        metric_name,
        COUNT(*) as cnt,
        round(AVG(value), 2) as avg,
        round(MAX(value), 2) as max,
        round(MIN(value), 2) as min
      FROM file('${filename}', 'Native')
      GROUP BY metric_name
    `);
    console.log(stats);

    console.log(`\n‚úÖ ${filename} –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

async function compareCompression() {
  console.log('\n' + '='.repeat(70));
  console.log('üìä –°–†–ê–í–ù–ï–ù–ò–ï –°–ñ–ê–¢–ò–Ø\n');

  const fs = await import('fs');
  
  try {
    const files = [
      { name: 'logs.native', label: '–ë–µ–∑ —Å–∂–∞—Ç–∏—è' },
      { name: 'logs_compressed.native', label: 'LZ4 –±–ª–æ–∫–∏' },
    ];

    console.log('–†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:');
    const sizes: { [key: string]: number } = {};
    
    for (const file of files) {
      if (fs.existsSync(`./${file.name}`)) {
        const size = fs.statSync(`./${file.name}`).size;
        sizes[file.name] = size;
        console.log(`  ${file.label.padEnd(15)} ${file.name.padEnd(25)} ${size.toString().padStart(6)} –±–∞–π—Ç`);
      } else {
        console.log(`  ${file.label.padEnd(15)} ${file.name.padEnd(25)} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }

    if (sizes['logs.native'] && sizes['logs_compressed.native']) {
      const ratio = (sizes['logs_compressed.native'] / sizes['logs.native'] * 100).toFixed(1);
      const saved = sizes['logs.native'] - sizes['logs_compressed.native'];
      console.log(`\n  –°—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è: ${ratio}%`);
      console.log(`  –≠–∫–æ–Ω–æ–º–∏—è: ${saved} –±–∞–π—Ç`);
    }

    console.log('\n=== –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• ===');
    
    const uncompressed = await query(`SELECT COUNT(*) as cnt FROM file('./logs.native', 'Native')`);
    const compressed = await query(`SELECT COUNT(*) as cnt FROM file('./logs_compressed.native', 'Native')`);
    
    console.log(`–ó–∞–ø–∏—Å–µ–π –≤ logs.native: ${uncompressed.data[0].cnt}`);
    console.log(`–ó–∞–ø–∏—Å–µ–π –≤ logs_compressed.native: ${compressed.data[0].cnt}`);
    
    if (uncompressed.data[0].cnt === compressed.data[0].cnt) {
      console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç!');
      
      const data1 = await query(`SELECT * FROM file('./logs.native', 'Native') ORDER BY timestamp`);
      const data2 = await query(`SELECT * FROM file('./logs_compressed.native', 'Native') ORDER BY timestamp`);
      
      if (JSON.stringify(data1.data) === JSON.stringify(data2.data)) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–Ω—ã!');
      } else {
        console.log('‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è!');
      }
    } else {
      console.log('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏:', error);
  }
}

async function diagnoseFiles() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–ê–ô–õ–û–í\n');
  
  const fs = await import('fs');
  
  const files = [
    'logs.native',
    'logs_compressed.native', 
    'metrics_compressed.native'
  ];

  for (const filename of files) {
    if (fs.existsSync(`./${filename}`)) {
      const buf = fs.readFileSync(`./${filename}`);
      console.log(`‚úÖ ${filename}:`, buf.length, '–±–∞–π—Ç');
      
      const hex = buf.slice(0, 32).toString('hex').match(/.{1,2}/g)?.join(' ');
      console.log('   Hex:', hex);
      
      if (buf.length > 16) {
        const first16 = buf.slice(0, 16);
        const isZeroChecksum = first16.every(b => b === 0);
        if (isZeroChecksum && buf[16] === 0x82) {
          console.log('   –§–æ—Ä–º–∞—Ç: ClickHouse LZ4 –±–ª–æ–∫–∏ (–Ω—É–ª–µ–≤–æ–π checksum)');
        } else if (buf[16] === 0x82) {
          console.log('   –§–æ—Ä–º–∞—Ç: ClickHouse LZ4 –±–ª–æ–∫–∏ (—Å checksum)');
        } else if (buf[0] < 0x10) {
          console.log('   –§–æ—Ä–º–∞—Ç: Native –Ω–µ—Å–∂–∞—Ç—ã–π (UVarInt –Ω–∞—á–∞–ª–æ)');
        } else {
          console.log('   –§–æ—Ä–º–∞—Ç: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω');
        }
      }
      console.log();
    } else {
      console.log(`‚ùå ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω\n`);
    }
  }
  
  console.log('='.repeat(70));
}

async function testAllFiles() {
  console.log('\n' + '='.repeat(70));
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –§–ê–ô–õ–û–í\n');

  const files = [
    { name: 'logs.native', desc: '–õ–æ–≥–∏ –±–µ–∑ —Å–∂–∞—Ç–∏—è' },
    { name: 'logs_compressed.native', desc: '–õ–æ–≥–∏ LZ4 –±–ª–æ–∫–∏' },
    { name: 'metrics_compressed.native', desc: '–ú–µ—Ç—Ä–∏–∫–∏ LZ4 –±–ª–æ–∫–∏' },
  ];

  for (const file of files) {
    console.log(`\nüìÑ ${file.desc} (${file.name})`);
    try {
      const result = await query(`SELECT COUNT(*) as cnt FROM file('./${file.name}', 'Native')`);
      console.log(`   ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.data[0].cnt}`);
      
      const sample = await query(`SELECT * FROM file('./${file.name}', 'Native') LIMIT 1`);
      console.log(`   ‚úÖ –ö–æ–ª–æ–Ω–∫–∏: ${Object.keys(sample.data[0]).join(', ')}`);
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${error}`);
    }
  }
}

async function main() {
  console.log('ClickHouse Native Format - –ë–ª–æ—á–Ω–æ–µ LZ4 —Å–∂–∞—Ç–∏–µ');
  console.log('='.repeat(70));
  console.log();

  await diagnoseFiles();
  await testAllFiles();
  await compareCompression();
  
  console.log('\n' + '='.repeat(70));
  await queryLogsFile('./logs.native');
  
  console.log('\n' + '='.repeat(70));
  await queryLogsFile('./logs_compressed.native');
  
  await queryMetricsFile('./metrics_compressed.native');

  console.log('\n' + '='.repeat(70));
  console.log('‚úÖ –ì–û–¢–û–í–û');
  console.log('\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–ª–æ—á–Ω–æ–µ LZ4 —Å–∂–∞—Ç–∏–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É ClickHouse Native protocol');
}

main().catch((e) => {
  console.error('üí• –û—à–∏–±–∫–∞:', e);
  process.exit(1);
});