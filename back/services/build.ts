
// build.ts ‚Äî —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≥–æ—Ç–æ–≤—ã–º–∏ ESM –º–æ–¥—É–ª—è–º–∏
import { $ } from "bun";
import { readdirSync, statSync, mkdirSync } from "fs";
import { join } from "path";

const size = (p: string) => {
    try {
      return `${(statSync(p).size / 1024).toFixed(1)}kb`;
    } catch {
      return "0kb";
    }
  };
  
  

const externalPkgs = [
    "elysia",
    "kysely",   
    "@elysiajs/cors",
    "openai",
    "bcryptjs",
    "@elysiajs/jwt"
  ];

  async function publicMouduleToS3(fileName: string) {
    console.log(`Uploading ${fileName} to S3...`);
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º await –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        await $`aws s3 cp ./dist${fileName} s3://converged-modules/back${fileName} `;
        console.log(`‚úÖ ${fileName} uploaded successfully`);
    } catch (error) {
        console.error(`‚ùå Failed to upload ${fileName}:`, error);
        throw error; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã—à–µ
    }
}  

/*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 4. –±–∞–Ω–¥–ª—ã –º–æ–¥—É–ª–µ–π –∏–∑ src/modules ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*/
const modulesDir = "./packages";
for (const dirent of readdirSync(modulesDir, { withFileTypes: true })) {
  if (!dirent.isDirectory()) continue;
  const name = dirent.name;
  const entry = join(modulesDir, name, "src/index.ts");


  console.log(entry);
  const outName = `/${name}.js`;
  const outPath = join("dist", outName);

  try {
    await Bun.build({
      entrypoints: [entry],
      outdir: "./dist",
      naming: outName, 
      minify: true, 
      target: "node",
      external: externalPkgs 
    });
    console.log(`üß© ${outName} - ${size(outPath)}`);
  } catch (e: any) {
    console.warn(`‚ö†Ô∏è  Module ${name} skipped: ${e.message}`);
    console.log(e);
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3 —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏
  await publicMouduleToS3(outName);
}


 