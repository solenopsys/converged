// query.ts
import { query } from "@lithdew/chdb-bun";

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É)
const STRUCT = "value Int32, message String";

async function main() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å–∂–∞—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏–∑ Native —Ñ–æ—Ä–º–∞—Ç–∞...\n');

  try {
    const sql = `
      SELECT *
      FROM file('./data.native', 'Native', '${STRUCT}')
    `;

    const res = await query(sql);
    console.log('=== –í–°–ï –î–ê–ù–ù–´–ï ===');
    console.log(res);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    console.log('\n=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó ===');
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const countSql = `SELECT COUNT(*) as total_rows FROM file('./data.native', 'Native', '${STRUCT}')`;
    const countRes = await query(countSql);
    console.log('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:', countRes);
    
    // –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    const orderedSql = `
      SELECT value, message 
      FROM file('./data.native', 'Native', '${STRUCT}') 
      ORDER BY value
    `;
    const orderedRes = await query(orderedSql);
    console.log('\n=== –î–ï–ö–û–ú–ü–†–ï–°–°–ò–†–û–í–ê–ù–ù–´–ï –°–¢–†–û–ö–ò ===');
    
    if (orderedRes.data && Array.isArray(orderedRes.data)) {
      orderedRes.data.forEach((row: any, index: number) => {
        console.log(`${index + 1}. value: ${row.value}, message: "${row.message}" (–¥–ª–∏–Ω–∞: ${row.message.length})`);
      });
    } else {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
      const dataStr = String(orderedRes.data || orderedRes);
      console.log('–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', dataStr);
      
      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
      const lines = dataStr.split('\n').filter(line => line.trim());
      lines.forEach((line, index) => {
        console.log(`${index + 1}. ${line}`);
      });
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–ª–∏–Ω–∞–º —Å—Ç—Ä–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    console.log('\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===');
    const lengthSql = `
      SELECT 
        value,
        message,
        length(message) as msg_length,
        upper(message) as msg_upper,
        contains(message, 'Test') as contains_test
      FROM file('./data.native', 'Native', '${STRUCT}') 
      ORDER BY value
    `;
    const lengthRes = await query(lengthSql);
    console.log(lengthRes);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    console.log('\n=== –¢–ï–°–¢ –°–¢–†–û–ö–û–í–´–• –§–£–ù–ö–¶–ò–ô ===');
    const stringFuncSql = `
      SELECT 
        value,
        message,
        substring(message, 1, 10) as first_10_chars,
        reverse(message) as reversed,
        concat('–ü—Ä–µ—Ñ–∏–∫—Å: ', message) as with_prefix
      FROM file('./data.native', 'Native', '${STRUCT}') 
      WHERE value <= 3
      ORDER BY value
    `;
    const stringFuncRes = await query(stringFuncSql);
    console.log(stringFuncRes);
    
    // –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    console.log('\n=== –ü–û–ò–°–ö –ü–û –°–û–î–ï–†–ñ–ò–ú–û–ú–£ ===');
    const searchSql = `
      SELECT 
        value, 
        message 
      FROM file('./data.native', 'Native', '${STRUCT}') 
      WHERE message LIKE '%message%' OR message LIKE '%Test%'
      ORDER BY value
    `;
    const searchRes = await query(searchSql);
    console.log('–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å "message" –∏–ª–∏ "Test":', searchRes);
    
    // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    console.log('\n=== –ê–ì–†–ï–ì–ê–¶–ò–Ø ===');
    const aggSql = `
      SELECT 
        COUNT(*) as total_messages,
        AVG(length(message)) as avg_length,
        MAX(length(message)) as max_length,
        MIN(length(message)) as min_length
      FROM file('./data.native', 'Native', '${STRUCT}')
    `;
    const aggRes = await query(aggSql);
    console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', aggRes);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–∂–∞—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–∏—Ç–∞—é—Ç—Å—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–∂–∞—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    console.log('\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª data.native —Å–æ–∑–¥–∞–Ω —Å –∫–æ–º–ø—Ä–µ—Å—Å–∏–µ–π');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: "value Int32, message String"');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–∂–∞—Ç–∏—è –≤ —Ñ–∞–π–ª–µ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å gzip/0x82)');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    try {
      const diagSql = `SELECT count(*) FROM file('./data.native', 'Native', 'value Int32')`;
      const diagRes = await query(diagSql);
      console.log('4. –¢–µ—Å—Ç —Å –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π:', diagRes);
    } catch (diagError) {
      console.log('4. –§–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è:', diagError.message);
    }
  }
}

main().catch((e) => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e);
  process.exit(1);
});